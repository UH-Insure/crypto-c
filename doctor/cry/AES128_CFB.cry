/*
 * Test vectors for AES128 in CFB mode.
 *
 * These are taken from [NIST-SP-800-38A], Appendix F.3.
 *
 * @copyright Galois, Inc.
 * @author Alex J Malozemoff <amaloz@galois.com>
 * www.cryptol.net
 *
 * Sources:
 * [NIST-SP-800-38A]: Morris Dworkin. Recommendation for Block Cipher
 *     Modes of Operation: Methods and Techniques. NIST Special Publication
 *     800-38A. December 2001.
 *     @see https://doi.org/10.6028/NIST.SP.800-38A
 */
module Primitive::Symmetric::Cipher::Block::Modes::Tests::AES128_CFB where
import Primitive::Symmetric::Cipher::Block::Modes::Instantiations::AES128_CFB as AES128_CFB

/**
 * Section F.3.1: CFB1-AES128.Encrypt
 *
 * ```repl
 * :prove aes128_cfb1_encrypt_vector
 * ```
 */
property aes128_cfb1_encrypt_vector = (AES128_CFB::encrypt key iv plaintext) == ciphertext
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        iv  = 0x000102030405060708090a0b0c0d0e0f
        plaintext = [
            0b0, 0b1, 0b1, 0b0, 0b1, 0b0, 0b1, 0b1,
            0b1, 0b1, 0b0, 0b0, 0b0, 0b0, 0b0, 0b1
        ]
        ciphertext = [
            0b0, 0b1, 0b1, 0b0, 0b1, 0b0, 0b0, 0b0,
            0b1, 0b0, 0b1, 0b1, 0b0, 0b0, 0b1, 0b1
        ]

/**
 * Section F.3.2: CFB1-AES128.Decrypt
 *
 * ```repl
 * :prove aes128_cfb1_decrypt_vector
 * ```
 */
property aes128_cfb1_decrypt_vector = (AES128_CFB::decrypt key iv ciphertext) == plaintext
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        iv  = 0x000102030405060708090a0b0c0d0e0f
        ciphertext = [
            0b0, 0b1, 0b1, 0b0, 0b1, 0b0, 0b0, 0b0,
            0b1, 0b0, 0b1, 0b1, 0b0, 0b0, 0b1, 0b1
        ]
        plaintext = [
            0b0, 0b1, 0b1, 0b0, 0b1, 0b0, 0b1, 0b1,
            0b1, 0b1, 0b0, 0b0, 0b0, 0b0, 0b0, 0b1
        ]

/**
 * Section F.3.7: CFB8-AES128.Encrypt
 *
 * ```repl
 * :prove aes128_cfb8_encrypt_vector
 * ```
 */
property aes128_cfb8_encrypt_vector = (AES128_CFB::encrypt key iv plaintext) == ciphertext
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        iv  = 0x000102030405060708090a0b0c0d0e0f
        plaintext = [
            0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9,
            0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a, 0xae, 0x2d
        ]
        ciphertext = [
            0x3b, 0x79, 0x42, 0x4c, 0x9c, 0x0d, 0xd4, 0x36, 0xba,
            0xce, 0x9e, 0x0e, 0xd4, 0x58, 0x6a, 0x4f, 0x32, 0xb9
        ]

/**
 * Section F.3.8: CFB8-AES128.Decrypt
 *
 * ```repl
 * :prove aes128_cfb8_decrypt_vector
 * ```
 */
property aes128_cfb8_decrypt_vector = (AES128_CFB::decrypt key iv ciphertext) == plaintext
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        iv  = 0x000102030405060708090a0b0c0d0e0f
        ciphertext = [
            0x3b, 0x79, 0x42, 0x4c, 0x9c, 0x0d, 0xd4, 0x36, 0xba,
            0xce, 0x9e, 0x0e, 0xd4, 0x58, 0x6a, 0x4f, 0x32, 0xb9
        ]
        plaintext = [
            0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9,
            0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a, 0xae, 0x2d
        ]

/**
 * Section F.3.13: CFB128-AES128.Encrypt
 *
 * ```repl
 * :prove aes128_cfb128_encrypt_vector
 * ```
 */
property aes128_cfb128_encrypt_vector = (AES128_CFB::encrypt key iv plaintext) == ciphertext
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        iv  = 0x000102030405060708090a0b0c0d0e0f
        plaintext = [
            0x6bc1bee22e409f96e93d7e117393172a,
            0xae2d8a571e03ac9c9eb76fac45af8e51,
            0x30c81c46a35ce411e5fbc1191a0a52ef,
            0xf69f2445df4f9b17ad2b417be66c3710
        ]
        ciphertext = [
            0x3b3fd92eb72dad20333449f8e83cfb4a,
            0xc8a64537a0b3a93fcde3cdad9f1ce58b,
            0x26751f67a3cbb140b1808cf187a4f4df,
            0xc04b05357c5d1c0eeac4c66f9ff7f2e6
        ]

/**
 * Section F.3.14: CFB128-AES128.Decrypt
 *
 * ```repl
 * :prove aes128_cfb128_decrypt_vector
 * ```
 */
property aes128_cfb128_decrypt_vector = (AES128_CFB::decrypt key iv ciphertext) == plaintext
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        iv  = 0x000102030405060708090a0b0c0d0e0f
        ciphertext = [
            0x3b3fd92eb72dad20333449f8e83cfb4a,
            0xc8a64537a0b3a93fcde3cdad9f1ce58b,
            0x26751f67a3cbb140b1808cf187a4f4df,
            0xc04b05357c5d1c0eeac4c66f9ff7f2e6
        ]
        plaintext = [
            0x6bc1bee22e409f96e93d7e117393172a,
            0xae2d8a571e03ac9c9eb76fac45af8e51,
            0x30c81c46a35ce411e5fbc1191a0a52ef,
            0xf69f2445df4f9b17ad2b417be66c3710
        ]
